int grid[4][4];

grid[4][4] ={0, 0, 0, 0,
              0, 0, 0, 0,
              0, 0, 0, 0,
              0, 0, 0, 0,}; // or {} ?? or ((xxxx))

int i;
int j; //columns to be incremented

i = 0;
j = 0; // or int row & column? 
// grid[row][column]?
int puzzle_check(int row, int col, int num, int *input) 
while (i < 4) //(grid[0][j] == 0)
 {  
    {
        while ()
    } 
  
 }
 i++;
-------------------------------------------------------
#include <stdio.h>


void draw_board(int arguments[4][4], int grid[4][4]) {
    printf("  ");
    // Print the first row of arguments above the grid
    for (int i = 0; i < 4; i++) {
        printf("%d ", arguments[0][i]);
    }
    printf("\n");

    // Print the grid with the third and fourth row of arguments on the sides
    for (int i = 0; i < 4; i++) {
        // Third row of arguments on the left
        printf("%d ", arguments[2][i]);

        // Print the grid row
        for (int j = 0; j < 4; j++) {
            printf("%d ", grid[i][j]);
        }

        // Fourth row of arguments on the right
        printf("%d", arguments[3][i]);
        printf("\n");
    }
    printf("  ");
    // Print the second row of arguments below the grid
    for (int i = 0; i < 4; i++) {
        printf("%d ", arguments[1][i]);
    }
    printf("\n");
};

int sumu_magic(int arguments[4][4], int grid[4][4]) {
   
    int i = 0;
    // Print the grid with the third and fourth row of arguments on the sides
    for (int i = 0; i < 4; i++) {
        // Third row of arguments on the left
        int left = arguments[2][i];
        int right = arguments[3][i];

        if (left == 4){
            if (right != 1){
                return -1;
            }            
            grid[i][0] = 1;
            grid[i][1] = 2;
            grid[i][2] = 3;
            grid[i][3] = 4;
        }
        if (right == 4){
            if (left != 1){
                return -1;
            }    
            grid[i][0] = 4;
            grid[i][1] = 3;
            grid[i][2] = 2;
            grid[i][3] = 1;
        }
        if (right == 1)
        {
            if (left == 1){
            return -1;
            }
            grid[i][3] = 4;
        }
        if (left == 1)
        {
            if (right == 1){
                return -1;
            }
            grid[i][0] = 4;
        }
        
        
    }  
    for (int j = 0; j < 4; j++)
    {
        int top = arguments[0][j];
        int bottom = arguments[1][j];

        if (top == 4){
            if (bottom != 1){
                return -1;
            }            
            grid[0][j] = 1;
            grid[1][j] = 2;
            grid[2][j] = 3;
            grid[3][j] = 4;
        }
        if (bottom == 4){
            if (top != 1){
                return -1;
            }    
            grid[0][j] = 4;
            grid[1][j] = 3;
            grid[2][j] = 2;
            grid[3][j] = 1;
        }
        if (bottom == 1)
        {
            if (top == 1){
            return -1;
            }
            grid[3][j] = 4;
        }
        if (top == 1)
        {
            if (bottom == 1){
                return -1;
            }
            grid[0][j] = 4;
        }
    } 
    return 0;
};

int main(int argc, char const *argv[])
{
    int arguments[4][4] = {{4, 3, 2, 1}, 
                         {1, 2, 2, 2}, 
                         {4, 3, 2, 1}, 
                         {1, 2, 2, 2}};

    int grid[4][4] = {{0,0,0,0},
                      {0,0,0,0},
                      {0,0,0,0},
                      {0,0,0,0}};
    

    if (sumu_magic(arguments,grid) == -1){
        printf("Not possible\n");
    };
    draw_board(arguments,grid);
    printf("\n");

    return 0;
}

